buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
    }
}

plugins {
    id 'java'
    id 'application'
}
apply plugin: 'com.github.johnrengelman.shadow'


repositories {
    mavenCentral()
}

repositories {
    mavenCentral()
//    maven {
//        url 'http://maven.inria.fr/artifactory/spoon-public-snapshot'
//    }
    mavenLocal()

    flatDir {
        dirs 'libs'
    }
}

dependencies {

    //compile "ch.adnovum.sb4b:corda-flow-base:0.2.1903271115"
    implementation "$corda_release_group:corda-core:$corda_release_version"
    implementation "fr.inria.gforge.spoon:spoon-core:$spoon_version"

    //FIXME: we should depend on the thing they should publish on the remote repo, bu have not done yet
    implementation "org.jboss.windup.decompiler.fernflower:fernflower:2.5.0.Final"
    implementation "org.benf:cfr:0.135"
    implementation name: 'spoon-decompiler-0.1.0-SNAPSHOT'//"fr.inria.gforge.spoon:spoon-decompiler:0.1.0-SNAPSHOT"

    implementation "org.jfree:jfreesvg:3.4"

    //testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation("org.junit.jupiter:junit-jupiter:$junit5_version")
    testImplementation("org.assertj:assertj-core:$assertj_version")
    testRuntime('org.junit.jupiter:junit-jupiter-engine:$junit5_version')
    testImplementation project(":test-utils").sourceSets.test.output
}

application {
    mainClassName = 'com.github.lucacampanella.callgraphflows.Main'
}

//processResources {
//    from("./src/main/java/com/github/lucacampanella/callgraphflows/staticanalyzer/matchers/MatcherContainer.java")
//}



task copyTestJarToResources(type: Copy) {
    println "56+5665+ copytask executed"
    //println sourceSets.test.resources.srcDirs
    //println sourceSets.test.output.resourcesDir
//    from buildDir.toURI().toURL().toString() + "/libs/JarAnalyzerTestJar-" + version + ".jar";
    from buildDir.toURI().toURL().toString() + "/libs/JarAnalyzerTestJar.jar";
    //into sourceSets.test.output.resourcesDir
    into sourceSets.test.output.resourcesDir
}

task createTestJar(type: Jar) {
    println "#1234567890"
    println sourceSets.test.output.asPath
    archiveName = "JarAnalyzerTestJar.jar"
    from {
        sourceSets.test.output
        //configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    include '**/testclasses/subclassestests/*.class'
    //include '**/testclasses/ExtendingSuperclassTestFlow.class'
    //include '**/InitiatorBaseFlow.class'
    //include '**/DoubleExtendingSuperclassTestFlow.class'
    includeEmptyDirs false
    //with jar
}

tasks.withType(Test).each{it -> it.dependsOn(copyTestJarToResources)}

//processTestResources {
//    from buildDir.toURI().toURL().toString() + "/libs/JarAnalyzerTestJar-" + version + ".jar"
//}

processResources {
    println "1234567890"
    println sourceSets.main.java.filter {it.toString().endsWith("MatcherContainer.java")}.first().toString()
    from sourceSets.main.java.filter {it.toString().endsWith("MatcherContainer.java")}.first().toString()
    // "./src/main/java/com/github/lucacampanella/callgraphflows/staticanalyzer/matchers/MatcherContainer.java"
}


copyTestJarToResources.dependsOn(createTestJar)
//tasks.withType(JavaCompile).all(it -> copyTestJarToResources.dependsOn(it))
//copyTestJarToResources.dependsOn()
//build.dependsOn(copyTestJarToResources)

//
//tasks.withType(JavaCompile) {
//    doFirst {
//        project.copy {
//            from "./src/main/java/com/github/lucacampanella/callgraphflows/staticanalyzer/matchers/MatcherContainer.java"
//            into "./src/main/resources/"
//        }
//    }
//}