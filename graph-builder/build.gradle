import java.nio.file.Paths

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'application'
}
apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'

build.dependsOn(publish)

repositories {
    mavenCentral()
    mavenLocal()

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation "$corda_release_group:corda-core:$corda_release_version"
    implementation "$corda_release_group:corda-confidential-identities:$corda_release_version"
    implementation "fr.inria.gforge.spoon:spoon-core:$spoon_version"

    implementation "org.jboss.windup.decompiler.fernflower:fernflower:2.5.0.Final"
    implementation "org.benf:cfr:0.135"//145 doesn't work for some reason

    implementation "org.jfree:jfreesvg:3.4"
    implementation "org.slf4j:slf4j-simple:1.7.26"
    implementation "info.picocli:picocli:3.9.6"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    testImplementation "org.slf4j:slf4j-simple:1.7.26"
    testImplementation project(":test-utils").sourceSets.test.output
}

mainClassName = 'com.github.lucacampanella.callgraphflows.Main'

task copyTestJarToResources(type: Copy) {
    from buildDir.toURI().toURL().toString() + "/libs/JarAnalyzerTestJar.jar";
    into sourceSets.test.output.resourcesDir
}

task createTestJar(type: Jar) {
    archiveFileName = "JarAnalyzerTestJar.jar"
    from {
        sourceSets.test.output
    }
    include '**/testclasses/subclassestests/*.class'
    includeEmptyDirs false
}

copyTestJarToResources.dependsOn(createTestJar)

tasks.withType(Test).each{it -> it.dependsOn(copyTestJarToResources)}

processResources {
    from sourceSets.main.java.filter {it.toString().endsWith("MatcherContainer.java")}.first().toString()
}

task copySourceResForTests(type: Copy){
    from sourceSets.test.java.filter {it.toString().contains("subclassestests")}
    into file(sourceSets.test.output.resourcesDir.path + "/subclassestests")
}
processTestResources.dependsOn copySourceResForTests

sourceSets {
    test.java.srcDirs += 'src/test/kotlin'
}

task generateIndexFileForTests() {
    doLast {
        File graphsFolder = file(Paths.get(buildDir.absolutePath, "graphs"))
        File indexFile = file(Paths.get(graphsFolder.absolutePath, "indexForTests.adoc"))
        graphsFolder.mkdirs()
        indexFile.createNewFile()
        indexFile.text = "# Index file for tests\n\n"

        graphsFolder.eachFileRecurse groovy.io.FileType.FILES, { file ->
            if (file.name.endsWith(".adoc") && !file.name.startsWith("index")) {
                indexFile << "include::" + file.name + "[]\n"
            }
        }
    }
}

test.finalizedBy generateIndexFileForTests

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
        }
    }
}
