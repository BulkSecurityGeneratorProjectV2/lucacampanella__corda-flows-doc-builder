import java.nio.file.Paths

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'//4.0.1'// todo: change fro gradle 5
//--------------------------------------- Added for publishing on sonartype
//        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'3
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.21'
    }
}

plugins {
    id 'application'
//    id 'maven-publish'
}
apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'

build.dependsOn(publish)

repositories {
    mavenCentral()
    mavenLocal()

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation "$corda_release_group:corda-core:$corda_release_version"
    implementation "$corda_release_group:corda-confidential-identities:$corda_release_version"
    implementation "fr.inria.gforge.spoon:spoon-core:$spoon_version"

    implementation "org.jboss.windup.decompiler.fernflower:fernflower:2.5.0.Final"
    implementation "org.benf:cfr:0.135"

    implementation "org.jfree:jfreesvg:3.4"
    implementation "org.slf4j:slf4j-simple:1.7.26"
    implementation "info.picocli:picocli:3.9.6"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.3.21"

    testImplementation "org.slf4j:slf4j-simple:1.7.26"
    testImplementation project(":test-utils").sourceSets.test.output
}
//jar {
//    from configurations.implementation.collect {
//
//        it.isDirectory() ? it : zipTree(it)
//    }
//} todo: change fro gradle 5
mainClassName = 'com.github.lucacampanella.callgraphflows.Main'

//application {
//    mainClassName = 'com.github.lucacampanella.callgraphflows.Main'
//}

task copyTestJarToResources(type: Copy) {
    from buildDir.toURI().toURL().toString() + "/libs/JarAnalyzerTestJar.jar";
    into sourceSets.test.output.resourcesDir
}

task createTestJar(type: Jar) {
    archiveName = "JarAnalyzerTestJar.jar"
    from {
        sourceSets.test.output
    }
    include '**/testclasses/subclassestests/*.class'
    includeEmptyDirs false
}

copyTestJarToResources.dependsOn(createTestJar)

tasks.withType(Test).each{it -> it.dependsOn(copyTestJarToResources)}

processResources {
    from sourceSets.main.java.filter {it.toString().endsWith("MatcherContainer.java")}.first().toString()
}

sourceSets {
    test.java.srcDirs += 'src/test/kotlin'
}

task createIndexFileForViewingTests() {
    File graphsFolder = file(Paths.get(buildDir.absolutePath, "graphs"))
    File indexFile = file(Paths.get(graphsFolder.absolutePath, "indexForTests.adoc"))
    indexFile.text = "# Index file for tests\n\n"

    graphsFolder.eachFileRecurse groovy.io.FileType.FILES,  { file ->
        if (file.name.endsWith(".adoc") && !file.name.startsWith("index")) {
            indexFile << "include::" + file.name + "[]\n"
        }
    }
}

//task copyKotlinTestJarToResources(type: Copy) {
//    from buildDir.toURI().toURL().toString() + "/libs/KotlinTestJar.jar";
//    into sourceSets.test.output.resourcesDir
//}
//
//task createKotlinTestJar(type: Jar) {
//
////    archiveFileName = "KotlinTestJar.jar"
////    from {
////        sourceSets.test.output
////    }
////    //include '**/kotlin/**/*.class'
////    includeEmptyDirs false
//
//
//    println file(buildDir.toString() + "/classes/kotlin/test").listFiles({File file -> file.toString().contains("KotlinTestFlow")} as FileFilter)
//    from file(buildDir.toString() + "/classes/kotlin/test").listFiles({File file -> file.toString().contains("KotlinTestFlow")} as FileFilter)
//    archiveFileName = "KotlinTestJar.jar"
////    doLast {
////        println "kotlin test jar"
////        println sourceSets.test.output.classesDirs
////        println sourceSets.test.output.classesDirs.asFileTree.filter {
////            it.toString().contains("KotlinTestFlow")
////        }.collect()
////
////
////        //println file(sourceSets.test.output.asPath).listFiles()
////        //println configurations.testRuntimeClasspath.asPath//collect { it.isDirectory() ? it : zipTree(it) }
////        from sourceSets.test.output.classesDirs.asFileTree.filter { it.toString().contains("KotlinTestFlow")}.collect()
////    }
//
//}
//
//copyKotlinTestJarToResources.dependsOn(createKotlinTestJar)
//tasks.withType(Test).each{it -> it.dependsOn(copyKotlinTestJarToResources)}


//createKotlinTestJar.dependsOn(compileTestKotlin)
//processTestResources.dependsOn(createKotlinTestJar)
//processTestResources {
//    from file(buildDir.toString() + "/libs/KotlinTestJar.jar")
//}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
        }
    }
} //todo: change fro gradle 5
