// bintray
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

plugins {
    id 'com.gradle.build-scan' version '2.3'
    id 'com.github.ben-manes.versions' version '0.21.0' // task: dependencyUpdates
    id 'org.ajoberstar.reckon' version '0.11.0'
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

reckon {
    scopeFromProp()
    stageFromProp('beta', 'rc', 'final')
}

task version {
    doLast {
        if (project.findProperty('reckon.stage')) {
            println "to tag and release a new version use:"
            println "git tag -a '${project.version}' -m '${project.version}' && git push origin '${project.version}'"
        } else {
            println "to figure out the next version run:"
            println "CI=true ./gradlew version -Preckon.scope=[major,minor,patch] -Preckon.stage=[rc,final]"
        }
    }
}
reckonTagCreate.dependsOn "build"

allprojects {
    if (System.getenv('CI') == null) {
        project.version = '0.0.0-SNAPSHOT'
    }

    apply plugin: 'java'

    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.0'
        spoon_version = '7.4.0' //TODO: understand how to propagate this
        assertj_version = '3.12.2'
        junit5_version = '5.4.2'
        short_description='Gradle plugin to automatically generate graph that represent Corda flows interactions.'
        url='https://github.com/lucacampanella/corda-flows-doc-builder'
        git_url = url + ".git"
    }
    
    group 'com.github.lucacampanella'
    //version '0.0.1-SNAPSHOT'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    test {
        // junit5 support
        useJUnitPlatform()

        if (System.getenv('CI') != null) {
            testLogging {
                events "passed", "skipped", "failed"
                exceptionFormat "full"
            }
        }
    }
}


// releases
subprojects {
    if (sourceSets.main.allSource.isEmpty()) {
        println "returned empty from subproject " + project.name
        return // excluding test-only subprojects
    }

    apply plugin: 'maven-publish'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = project.name
                    description = project.short_description
                    url = project.url
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                }
            }
        }
    }

    // bintray
    apply plugin: 'com.jfrog.bintray'
    def isReleaseBuild = project.version.toString().matches("[0-9.]+") // no "rc" or "snapshot"
    bintray {
        user = 'lucacampanella'
        key = System.getenv('BINTRAY_TOKEN')
        publications = project.publishing.publications.collect{ it.name }
        publish = isReleaseBuild //todo: fix

        override = true
        
        pkg {
            repo = isReleaseBuild ? 'mvn-release' : 'mvn-snapshot'
            name = project.name
            desc = project.short_description

            websiteUrl = project.url
            vcsUrl = project.git_url
            //githubRepo = project.git_url
            licenses = ['Apache-2.0']
            labels = ['configuration']
            version {
                name = project.version
                released = new Date()
                mavenCentralSync {
                    sync = false
                }
            }
        }
    }

    bintrayUpload {
        dependsOn publishToMavenLocal
        doFirst {
            Objects.requireNonNull(apiKey, 'missing bintray token')
        }
    }
    publish.dependsOn bintrayUpload

    bintrayUpload.onlyIf { System.getenv('CI') != null }
}